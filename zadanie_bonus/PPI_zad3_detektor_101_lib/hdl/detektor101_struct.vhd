-- VHDL Entity PPI_zad3_detektor_101_lib.detektor101.symbol
--
-- Created:
--          by - marek.UNKNOWN (LAPTOP-32238)
--          at - 18:01:26 14. 12. 2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY detektor101 IS
   PORT( 
      X   : IN     std_logic;
      clk : IN     std_logic;
      clr : IN     std_logic;
      Y   : OUT    std_logic
   );

-- Declarations

END detektor101 ;

--
-- VHDL Architecture PPI_zad3_detektor_101_lib.detektor101.struct
--
-- Created:
--          by - marek.UNKNOWN (LAPTOP-32238)
--          at - 18:01:26 14. 12. 2022
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;


ARCHITECTURE struct OF detektor101 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL din0  : std_logic;
   SIGNAL dout  : std_logic;
   SIGNAL dout1 : std_logic;
   SIGNAL dout2 : std_logic;
   SIGNAL dout3 : std_logic;
   SIGNAL dout4 : std_logic;
   SIGNAL dout5 : std_logic;
   SIGNAL dout6 : std_logic;
   SIGNAL dout7 : std_logic;
   SIGNAL dout8 : std_logic;
   SIGNAL q     : std_logic;
   SIGNAL q1    : std_logic;
   SIGNAL q2    : std_logic;
   SIGNAL qb    : std_logic;
   SIGNAL xneg  : std_logic;


   -- ModuleWare signal declarations(v1.9) for instance 'U_6' of 'jkff'
   SIGNAL mw_U_6reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.9) for instance 'U_7' of 'jkff'
   SIGNAL mw_U_7reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.9) for instance 'U_8' of 'jkff'
   SIGNAL mw_U_8reg_cval : std_logic;


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_6' of 'jkff'
   q <= mw_U_6reg_cval;
   u_6seq_proc: PROCESS (clk, clr)
   BEGIN
      IF (clr = '0') THEN
         mw_U_6reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         IF ((dout = '0') AND (dout1 = '0')) THEN
            mw_U_6reg_cval <= mw_U_6reg_cval;
         ELSIF ((dout = '0') AND (dout1 = '1')) THEN
            mw_U_6reg_cval <= '0';
         ELSIF ((dout = '1') AND (dout1 = '0')) THEN
            mw_U_6reg_cval <= '1';
         ELSIF ((dout = '1') AND (dout1 = '1')) THEN
            mw_U_6reg_cval <= NOT(mw_U_6reg_cval);
         END IF;
      END IF;
   END PROCESS u_6seq_proc;

   -- ModuleWare code(v1.9) for instance 'U_7' of 'jkff'
   q1 <= mw_U_7reg_cval;
   u_7seq_proc: PROCESS (clk, clr)
   BEGIN
      IF (clr = '0') THEN
         mw_U_7reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         IF ((dout2 = '0') AND (dout3 = '0')) THEN
            mw_U_7reg_cval <= mw_U_7reg_cval;
         ELSIF ((dout2 = '0') AND (dout3 = '1')) THEN
            mw_U_7reg_cval <= '0';
         ELSIF ((dout2 = '1') AND (dout3 = '0')) THEN
            mw_U_7reg_cval <= '1';
         ELSIF ((dout2 = '1') AND (dout3 = '1')) THEN
            mw_U_7reg_cval <= NOT(mw_U_7reg_cval);
         END IF;
      END IF;
   END PROCESS u_7seq_proc;

   -- ModuleWare code(v1.9) for instance 'U_8' of 'jkff'
   q2 <= mw_U_8reg_cval;
   qb <= NOT(mw_U_8reg_cval);
   u_8seq_proc: PROCESS (clk, clr)
   BEGIN
      IF (clr = '0') THEN
         mw_U_8reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         IF ((X = '0') AND (dout4 = '0')) THEN
            mw_U_8reg_cval <= mw_U_8reg_cval;
         ELSIF ((X = '0') AND (dout4 = '1')) THEN
            mw_U_8reg_cval <= '0';
         ELSIF ((X = '1') AND (dout4 = '0')) THEN
            mw_U_8reg_cval <= '1';
         ELSIF ((X = '1') AND (dout4 = '1')) THEN
            mw_U_8reg_cval <= NOT(mw_U_8reg_cval);
         END IF;
      END IF;
   END PROCESS u_8seq_proc;

   -- ModuleWare code(v1.9) for instance 'U_2' of 'nand'
   xneg <= NOT(X AND X);

   -- ModuleWare code(v1.9) for instance 'U_3' of 'nand'
   din0 <= NOT(xneg AND q1 AND q2);

   -- ModuleWare code(v1.9) for instance 'U_4' of 'nand'
   dout5 <= NOT(xneg AND qb);

   -- ModuleWare code(v1.9) for instance 'U_5' of 'nand'
   Y <= NOT(dout8 AND dout8);

   -- ModuleWare code(v1.9) for instance 'U_9' of 'nand'
   dout7 <= NOT(X AND q2);

   -- ModuleWare code(v1.9) for instance 'U_10' of 'nand'
   dout8 <= NOT(q AND q1);

   -- ModuleWare code(v1.9) for instance 'U_11' of 'nand'
   dout6 <= NOT(q AND q2);

   -- ModuleWare code(v1.9) for instance 'U_12' of 'nand'
   dout <= NOT(din0 AND din0);

   -- ModuleWare code(v1.9) for instance 'U_13' of 'nand'
   dout1 <= NOT(dout5 AND dout7 AND dout8);

   -- ModuleWare code(v1.9) for instance 'U_14' of 'nand'
   dout2 <= NOT(dout7 AND dout6);

   -- ModuleWare code(v1.9) for instance 'U_15' of 'nand'
   dout3 <= NOT(din0 AND dout5 AND dout8);

   -- ModuleWare code(v1.9) for instance 'U_16' of 'nand'
   dout4 <= NOT(din0 AND q1);

   -- Instance port mappings.

END struct;
